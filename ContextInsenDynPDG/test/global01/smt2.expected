(set-option :fixedpoint.engine datalog)
; This sort is used to define all relations. It is the size of an
; unsigned on the target machine.
(define-sort s () (_ BitVec 32))

; Data dependency (assign to from) => (to<--from)
(declare-rel assign (s s))
; Control dependency (control-dep to from) => (to<--from)
(declare-rel control-dep (s s))
; A program dependency is either a control or data dependency
(declare-rel prog-dep (s s))
; points-to relation: this is relation contains any two values
; (regardless of if they are pointers) if they have a common
; ancestor in the data dependency graph (i.e. backwards reachable)
(declare-rel points-to (s s))

(declare-var to s)
(declare-var from s)
(declare-var pred s)

; A program dependency is either a control or data dependency
; This relation defines the program dependency graph
(rule (=> (control-dep to from) (prog-dep to from)))
(rule (=> (assign to from) (prog-dep to from)))
; Recusrive step: create the transitive closure of program
; dependencies
(rule (=> (and (prog-dep to from) (prog-dep from pred))
	(prog-dep to pred)))

; The data dependency graph can be used to query if two pointers
; (or, any two values) share a common data dependency
(rule (=> (assign to from) (points-to to from)))

; A pointer points to the transitive closure of its assignments
(rule (=> (and (assign to from) (points-to from pred))
	(points-to to pred)))


; Begin Facts

;   %1 = load i32* @a, align 4
(rule (assign #x00000000 #x00000001))
(rule (assign #x00000000 #x00000002))
;   %2 = add nsw i32 %1, 10
(rule (assign #x00000003 #x00000000))
(rule (assign #x00000003 #x00000004))
;   store i32 %2, i32* @a, align 4
(rule (assign #x00000005 #x00000001))
(rule (assign #x00000005 #x00000003))
(rule (assign #x00000002 #x00000005))
;   %1 = load i32* @a, align 4
(rule (assign #x00000006 #x00000001))
(rule (assign #x00000006 #x00000002))
;   %2 = add nsw i32 %1, 20
(rule (assign #x00000007 #x00000006))
(rule (assign #x00000007 #x00000008))
;   store i32 %2, i32* @a, align 4
(rule (assign #x00000009 #x00000001))
(rule (assign #x00000009 #x00000007))
(rule (assign #x00000002 #x00000009))
;   %1 = alloca i32, align 4
(rule (assign #x0000000a #x0000000b))
;   %2 = alloca i32, align 4
(rule (assign #x0000000c #x0000000d))
;   %3 = alloca i8**, align 8
(rule (assign #x0000000e #x0000000f))
;   store i32 0, i32* %1
(rule (assign #x00000010 #x0000000a))
(rule (assign #x00000010 #x00000011))
(rule (assign #x00000012 #x00000010))
;   store i32 %argc, i32* %2, align 4
(rule (assign #x00000014 #x0000000c))
(rule (assign #x00000014 #x00000013))
(rule (assign #x00000015 #x00000014))
;   store i8** %argv, i8*** %3, align 8
(rule (assign #x00000017 #x0000000e))
(rule (assign #x00000017 #x00000016))
(rule (assign #x00000018 #x00000017))
;   store i32 0, i32* @a, align 4
(rule (assign #x00000019 #x00000001))
(rule (assign #x00000019 #x00000011))
(rule (assign #x00000002 #x00000019))
;   call void @f1()
; Function return
(rule (assign #x0000001a #x0000001b))
; Function arguments
;   call void @f2()
; Function return
(rule (assign #x0000001c #x0000001d))
; Function arguments
;   ret i32 0
(rule (assign #x0000001e #x00000011))
(rule (assign #x0000001f #x0000001e))

; End Facts
