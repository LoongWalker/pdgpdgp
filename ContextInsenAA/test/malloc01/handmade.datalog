## Handcrafted output for main.c
### Context insensitive interprocedural alias analysis specification
Z 64
##### All pointer specification
# Dynamic allocation of memory. Globals are treated in the same way as heap
# allocations
Allocate(var : Z, heap : Z)

# Assignment
Assign(to : Z, from : Z)
#
## A variable pointing to memory location
PointsTo(var : Z, loc : Z) printtuples
#
## If the variable is a heap allocation then we know which heap item it points
## to.
##PointsTo(var, heap) :- Allocate(var, heap).
#PointsTo(var, heap) :- Assign(var, heap).
#
## Find the transitive closure of pointer assignments
#PointsTo(to, heap) :- Assign(to, from), PointsTo(from, heap).
###########
# malloc only specification
# Assignment
Assign(to : Z, from : Z)

# Heap allocation
#AllocHeap(var : Z, heap : Z)

# A variable pointing to memory location
#PointsTo(var : Z, loc : Z) printtuples

# An item is in the PointsTo relation if it is a heap allocation
#PointsTo(var, heap) :- AllocHeap(var, heap).

# Or, if it can transitively reach a heap allocation
#PointsTo(to, heap) :- Assign(to, from), PointsTo(from, heap).
##############################

#### argv01
#%1 = alloca i32, align 4
Assign("*1", "h1").

#%2 = alloca i32, align 4
Assign("*2", "h2").

#%3 = alloca i8**, align 8
Assign("***3", "h3").

#%x = alloca i8*, align 8
Assign("**x", "h4").

#%y = alloca i8*, align 8
Assign("**y", "h5").

#%z = alloca i8*, align 8
Assign("**z", "h6").

#store i32 0, i32* %1
# Store with a non-pointer first argument can be ignored (scalar assignment)

#store i32 %argc, i32* %2, align 4
# Store with a non-pointer first argument can be ignored (scalar assignment)

#store i8** %argv, i8*** %3, align 8
Assign("**3", "**argv").

#%4 = call noalias i8* @malloc(i64 1) #3
Assign("*4", "h7").
#AllocHeap("*4", "h7").

#store i8* %4, i8** %x, align 8
Assign("*x", "*4").

#%5 = load i8** %x, align 8
Assign("*5", "*x").

#store i8 97, i8* %5, align 1
# Store with a non-pointer first argument can be ignored (scalar assignment)

#%6 = load i8** %x, align 8
Assign("*6", "*x").

#store i8* %6, i8** %y, align 8
Assign("*y", "*6").

#%7 = load i8** %y, align 8
Assign("*7", "*y").

#store i8* %7, i8** %z, align 8
Assign("*z", "*7").

#%8 = load i8** %x, align 8
Assign("*8", "*x").

#%9 = load i8* %8, align 1
# Non-pointer returns of loads can be skipped

#%11 = load i8** %y, align 8
Assign("*11", "*y").

#%12 = load i8* %11, align 1
# Non-pointer returns of loads can be skipped

#%14 = load i8** %z, align 8
Assign("*14", "*z").

#%15 = load i8* %14, align 1
# Non-pointer returns of loads can be skipped
